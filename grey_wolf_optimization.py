# -*- coding: utf-8 -*-
"""Grey Wolf optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1334Vy3H3XILKfvUj0YzRtx_68fJPYlpf
"""

import numpy as np

# Objective function: Sphere function (minimize f(x) = x^2 + y^2)
def objective_function(position):
    return sum(x**2 for x in position)  # Simple function for testing

# Initialize parameters
num_wolves = 5
num_dimensions = 2  # 2D problem (x, y)
num_iterations = 20
search_space = (-10, 10)  # Range of values

# Initialize positions of wolves randomly
wolves = np.random.uniform(search_space[0], search_space[1], (num_wolves, num_dimensions))

# Identify Alpha, Beta, and Delta (best three solutions)
fitness = np.array([objective_function(w) for w in wolves])
sorted_indices = np.argsort(fitness)
alpha, beta, delta = wolves[sorted_indices[:3]]

# Main GWO loop
for iteration in range(num_iterations):
    a = 2 - iteration * (2 / num_iterations)  # Coefficient decreases over time

    for i in range(num_wolves):
        for d in range(num_dimensions):
            # Update position based on Alpha, Beta, and Delta
            r1, r2 = np.random.rand(), np.random.rand()
            A1, C1 = 2 * a * r1 - a, 2 * r2
            D_alpha = abs(C1 * alpha[d] - wolves[i][d])
            X1 = alpha[d] - A1 * D_alpha

            r1, r2 = np.random.rand(), np.random.rand()
            A2, C2 = 2 * a * r1 - a, 2 * r2
            D_beta = abs(C2 * beta[d] - wolves[i][d])
            X2 = beta[d] - A2 * D_beta

            r1, r2 = np.random.rand(), np.random.rand()
            A3, C3 = 2 * a * r1 - a, 2 * r2
            D_delta = abs(C3 * delta[d] - wolves[i][d])
            X3 = delta[d] - A3 * D_delta

            # New position update
            wolves[i][d] = (X1 + X2 + X3) / 3

    # Update Alpha, Beta, Delta
    fitness = np.array([objective_function(w) for w in wolves])
    sorted_indices = np.argsort(fitness)
    alpha, beta, delta = wolves[sorted_indices[:3]]

    print(f"Iteration {iteration+1}: Best Solution {alpha} with value {objective_function(alpha)}")